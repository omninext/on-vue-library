import _extends from "@babel/runtime/helpers/extends";
import "core-js/modules/es.array.reduce.js";
import "core-js/modules/es.object.keys.js";
import React from 'react';
import { render } from '@testing-library/react';
import { ArgumentRenderer, styles } from './ArgumentRenderer';
var name = 'Foo';
var type = {
  name: 'Array'
};
var description = 'Converts foo to bar';
var props = {
  classes: Object.keys(styles({})).reduce(function (a, cl) {
    a[cl] = cl;
    return a;
  }, {}),
  name: 'argname'
};
it('should render argument', function () {
  var actual = render( /*#__PURE__*/React.createElement(ArgumentRenderer, _extends({}, props, {
    name: name,
    type: type,
    description: description
  })));
  expect(actual.container).toMatchSnapshot();
});
it('should render argument without type', function () {
  var actual = render( /*#__PURE__*/React.createElement(ArgumentRenderer, _extends({}, props, {
    name: name,
    description: description
  })));
  expect(actual.container).toMatchSnapshot();
});
it('should render optional argument', function () {
  var actual = render( /*#__PURE__*/React.createElement(ArgumentRenderer, _extends({}, props, {
    type: {
      type: 'OptionalType',
      expression: {
        name: 'Array'
      }
    },
    description: description
  })));
  expect(actual.container).toMatchSnapshot();
});
it('should render default value of argument', function () {
  var actual = render( /*#__PURE__*/React.createElement(ArgumentRenderer, _extends({}, props, {
    type: {
      name: 'String'
    },
    "default": "bar",
    description: description
  })));
  expect(actual.container).toMatchSnapshot();
});
it('should render default value of optional argument', function () {
  var actual = render( /*#__PURE__*/React.createElement(ArgumentRenderer, _extends({}, props, {
    type: {
      type: 'OptionalType',
      expression: {
        name: 'Boolean'
      }
    },
    "default": "true",
    description: description
  })));
  expect(actual.container).toMatchSnapshot();
});
it('should render argument without description', function () {
  var actual = render( /*#__PURE__*/React.createElement(ArgumentRenderer, _extends({}, props, {
    name: name,
    type: type
  })));
  expect(actual.container).toMatchSnapshot();
});
it('should render return value', function () {
  var actual = render( /*#__PURE__*/React.createElement(ArgumentRenderer, _extends({}, props, {
    type: type,
    description: description,
    returns: true
  })));
  expect(actual.container).toMatchSnapshot();
});
it('should render with block styles', function () {
  var actual = render( /*#__PURE__*/React.createElement(ArgumentRenderer, _extends({}, props, {
    block: true
  })));
  expect(actual.container).toMatchSnapshot();
});