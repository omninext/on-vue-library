import _extends from "@babel/runtime/helpers/extends";
import "core-js/modules/es.array.reduce.js";
import "core-js/modules/es.object.keys.js";
import React from 'react';
import { render } from '@testing-library/react';
import { ArgumentsRenderer, styles } from './ArgumentsRenderer';
var props = {
  classes: Object.keys(styles({})).reduce(function (a, cl) {
    a[cl] = cl;
    return a;
  }, {})
};
var args = [{
  name: 'Foo',
  description: 'Converts foo to bar',
  type: {
    name: 'Array'
  }
}, {
  name: 'Foo'
}];
it('renderer should render arguments', function () {
  var actual = render( /*#__PURE__*/React.createElement(ArgumentsRenderer, _extends({}, props, {
    args: args
  })));
  expect(actual.container).toMatchSnapshot();
});
it('renderer should render heading', function () {
  var actual = render( /*#__PURE__*/React.createElement(ArgumentsRenderer, _extends({}, props, {
    args: [args[1]],
    heading: true
  })));
  expect(actual.container).toMatchSnapshot();
});
it('renderer should render nothing for empty array', function () {
  var actual = render( /*#__PURE__*/React.createElement(ArgumentsRenderer, _extends({}, props, {
    args: []
  })));
  expect(actual.container).toBe(null);
});